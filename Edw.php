<?php require_once "~edw/conf/define.php"; header("content-Type: text/html; charset=Utf-8"); if(!DISPLAY_ERRORS) error_reporting(0); if(function_exists('date_default_timezone_set')){ date_default_timezone_set('PRC'); } define('MX_VERSION','5.5.3'); defined('WEB_ROOT') or define('WEB_ROOT',strtolower(dirname(str_replace('\\','/',__FILE__)).'/')); define('UPLOAD_MAXSIZE',10); define('CHARSET','utf-8'); define('SYS_CONF','~edw/conf'); define('SYS_LIBS','~edw/libs'); define('SYS_TPL','~edw/tpls'); define('SYS_CPTAGS','~cptags'); defined('SYS_FOOTER_URL') or define('SYS_FOOTER_URL',''); define('WEB_MAX_UPFILE',function_exists("ini_get")?ini_get("upload_max_filesize"):'2M'); if(get_magic_quotes_gpc()){ function stripslashes_deep($value) { $value=is_array($value)?array_map('stripslashes_deep',$value):stripslashes($value); return $value; } $_POST = array_map('stripslashes_deep',$_POST); $_GET = array_map('stripslashes_deep',$_GET); $_COOKIE = array_map('stripslashes_deep',$_COOKIE); $_REQUEST = array_map('stripslashes_deep',$_REQUEST); } function redirect($url = '', $time=0, $msg='' ) { $url = (''== $url)?getenv('HTTP_REFERER'):$url; $url = str_replace(array("\n", "\r"), '', $url); if(0===$time) { header("Location:".$url); exit(); }else { include(WEB_ROOT.'/'.SYS_TPL.'/Redirect.php'); exit(); } } function httpheader($arr = array()) { if(empty($arr)){ header("Content-type: text/html; charset=".CHARSET.""); }else{ for($i=0;$i<count($arr);$i++){ header($arr[$i]); } } } function halt($error) { if(DISPLAY_ERRORS) die($error); } function get_client_ip() { if (getenv("HTTP_CLIENT_IP") && strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown")) $ip = getenv("HTTP_CLIENT_IP"); else if (getenv("HTTP_X_FORWARDED_FOR") && strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown")) $ip = getenv("HTTP_X_FORWARDED_FOR"); else if (getenv("REMOTE_ADDR") && strcasecmp(getenv("REMOTE_ADDR"), "unknown")) $ip = getenv("REMOTE_ADDR"); else if (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], "unknown")) $ip = $_SERVER['REMOTE_ADDR']; else $ip = "unknown"; return $ip; } function get_ip_address($ip) { if(!$fd = fopen(WEB_ROOT.SYS_LIBS.'/ip.dat','rb')){ return ''; } $ip = explode('.', $ip); $ipNum = $ip[0] * 16777216 + $ip[1] * 65536 + $ip[2] * 256 + $ip[3]; if(!($DataBegin = fread($fd, 4)) || !($DataEnd = fread($fd, 4)) ) return; @$ipbegin = implode('', unpack('L', $DataBegin)); if($ipbegin < 0) $ipbegin += pow(2, 32); @$ipend = implode('', unpack('L', $DataEnd)); if($ipend < 0) $ipend += pow(2, 32); $ipAllNum = ($ipend - $ipbegin) / 7 + 1; $BeginNum = $ip2num = $ip1num = 0; $ipAddr1 = $ipAddr2 = ''; $EndNum = $ipAllNum; while($ip1num>$ipNum || $ip2num<$ipNum){ $Middle= intval(($EndNum + $BeginNum)/2); fseek($fd,$ipbegin+7*$Middle); $ipData1 = fread($fd,4); if(strlen($ipData1)<4){ fclose($fd); return ''; } $ip1num = implode('',unpack('L',$ipData1)); if($ip1num < 0) $ip1num += pow(2, 32); if($ip1num > $ipNum) { $EndNum = $Middle; continue; } $DataSeek = fread($fd, 3); if(strlen($DataSeek)<3){ fclose($fd); return ''; } $DataSeek = implode('', unpack('L', $DataSeek.chr(0))); fseek($fd, $DataSeek); $ipData2 = fread($fd,4); if(strlen($ipData2)<4){ fclose($fd); return ''; } $ip2num = implode('',unpack('L', $ipData2)); if($ip2num < 0) $ip2num += pow(2, 32); if($ip2num<$ipNum) { if($Middle == $BeginNum) { fclose($fd); return '- Unknown'; } $BeginNum = $Middle; } } $ipFlag = fread($fd, 1); if($ipFlag == chr(1)){ $ipSeek = fread($fd, 3); if(strlen($ipSeek) < 3) { fclose($fd); return ''; } $ipSeek = implode('', unpack('L', $ipSeek.chr(0))); fseek($fd, $ipSeek); $ipFlag = fread($fd, 1); } if($ipFlag == chr(2)) { $AddrSeek = fread($fd, 3); if(strlen($AddrSeek) < 3) { fclose($fd); return ''; } $ipFlag = fread($fd, 1); if($ipFlag == chr(2)) { $AddrSeek2 = fread($fd, 3); if(strlen($AddrSeek2) < 3) { fclose($fd); return ''; } $AddrSeek2 = implode('', unpack('L', $AddrSeek2.chr(0))); fseek($fd, $AddrSeek2); }else{ fseek($fd, -1, SEEK_CUR); } while(($char = fread($fd, 1)) != chr(0)) $ipAddr2 .= $char; $AddrSeek = implode('', unpack('L', $AddrSeek.chr(0))); fseek($fd, $AddrSeek); while(($char = fread($fd, 1)) != chr(0)) $ipAddr1 .= $char; } else { fseek($fd, -1, SEEK_CUR); while(($char = fread($fd, 1)) != chr(0)) $ipAddr1 .= $char; $ipFlag = fread($fd, 1); if($ipFlag == chr(2)) { $AddrSeek2 = fread($fd, 3); if(strlen($AddrSeek2) < 3) { fclose($fd); return ''; } $AddrSeek2 = implode('', unpack('L', $AddrSeek2.chr(0))); fseek($fd, $AddrSeek2); }else{ fseek($fd, -1, SEEK_CUR); } while(($char = fread($fd, 1)) != chr(0)) $ipAddr2 .= $char; } fclose($fd); if(preg_match('/http/i', $ipAddr2)) { $ipAddr2 = ''; } $ipaddr = "$ipAddr1 $ipAddr2"; $ipaddr = preg_replace('/CZ88\.NET/is', '', $ipaddr); $ipaddr = preg_replace('/^\s*/is', '', $ipaddr); $ipaddr = preg_replace('/\s*$/is', '', $ipaddr); if(preg_match('/http/i', $ipaddr) || $ipaddr == '') { $ipaddr = ''; } return mb_convert_encoding($ipaddr,"UTF-8","GBK"); } function mk_dir($dir, $mode = 0755) { if (is_dir($dir) || @mkdir($dir,$mode)) return true; if (!mk_dir(dirname($dir),$mode)) return false; return @mkdir($dir,$mode); } function import($n,$t = 'tools') { require_once WEB_ROOT.SYS_LIBS.'/'.$t.'/'.$n.'.class.php'; } function JS($j) { return '<script type="text/javascript">'.$j.'</script>'; } function encodeGB(&$array) { if(is_array($array)) { foreach($array as $key=>$value){ if(!is_array($value)){ $array[$key]=mb_convert_encoding($value,"GBK","UTF-8"); }else{ encodeGB($array[$key]); } } }else{ mb_convert_encoding($array,"GBK","UTF-8"); } } function deldir($dir) { $dh=opendir($dir); while (false !== $file = readdir($dh)) { if($file!="." && $file!="..") { $fullpath=$dir."/".$file; !is_dir($fullpath)?unlink($fullpath):deldir($fullpath); } } closedir($dh); return rmdir($dir)?true:false; } function zh2py($string,$pre='',$l='') { require_once WEB_ROOT.'/'.SYS_LIBS.'/tools/Zh2PY.class.php'; $obj = new Zh2PY(); $str = $obj->str2py($string); $estr = explode('_', $str); $lstr = empty($pre)?count($estr):$pre; $res = array(); for($i=0;$i<$lstr;$i++){ $res[] = empty($l)?$estr[$i]:substr($estr[$i],0,$l); } return join('',$res); } function zipdownload($zipname,$data) { $zip = new ZipArchive(); if($zip->open($zipname, ZipArchive::OVERWRITE) === TRUE) { foreach($data as $list){ $zip->addFile($list['filepath'],iconv('UTF-8','GBK',$list['filename'])); } $zip->close(); } } function safe_html($str) { if(defined('POST_FILTER') && POST_FILTER){ $str = stripslashes($str); $farr = array( "/\s+/", "/<(\/?)(script|i?frame|\?|\%)([^>]*?)>/isU" ); $tarr = array( " ", "" ); $str = preg_replace( $farr,$tarr,$str); } return $str; } function read_cache_data($file,$dir='') { $dir = ($dir=="")?(WEB_ROOT.'/data/'):$dir; $nfile = (file_exists($dir. $file.".php"))?include( $dir. $file.".php"):array(); return $nfile; } function write_cache_data($data,$file,$dir = '') { $dir = ($dir=="")?(WEB_ROOT.'/data/'):$dir; if(!is_dir($dir)) mk_dir($dir); $result = "<?php\n return ".var_export($data,TRUE).";\n?>"; file_put_contents($dir.$file.".php",$result); } function images_bg_tune($resource_image,$des_image = '',$w = 100,$h = 100,$pos = 'center',$bgcolor = 0xFFFFFF) { $resource_image = WEB_ROOT.$resource_image; $des_image = empty($des_image)?$resource_image:WEB_ROOT.$des_image; $imageInfo = getimagesize($resource_image); $img_mime = strtolower($imageInfo['mime']); switch ($img_mime){ case 'image/gif': $img = imagecreatefromgif($resource_image); break; case 'image/jpeg':$img = imagecreatefromjpeg($resource_image); break; case 'image/jpg': $img = imagecreatefromjpeg($resource_image); break; case 'image/png': $img = imagecreatefrompng($resource_image); break; } $width = imagesx($img); $height = imagesy($img); if (!$width || !$height) { halt("无法获取图片的宽和高"); exit(); } $target_ratio = $w/$h; $img_ratio = $width/$height; if ($h>=$height && $w>=$width) { $new_height = $height; $new_width = $width; }else{ if ($target_ratio > $img_ratio) { $new_height = $h; $new_width = $img_ratio * $h; } else { $new_height = $w / $img_ratio; $new_width = $w; } } $new_img = imagecreatetruecolor($w, $h); if (!@imagefilledrectangle($new_img, 0, 0, $w-1, $h-1, $bgcolor)) { halt("无法创建背景图像"); exit(); } $posx = 0; $posy = 0; switch ($pos){ case 'top': $posx = ($w-$new_width)/2; $posy = 0; break; case 'topleft': $posx = 0; $posy = 0; break; case 'topright': $posx = $w-$new_width; $posy = 0; break; case 'center': $posx = ($w-$new_width)/2; $posy = ($h-$new_height)/2; break; case 'bottom': $posx = ($w-$new_width)/2; $posy = $h-$new_height; break; case 'bottomleft': $posx = 0; $posy = $h-$new_height; break; case 'bottomright': $posx = $w-$new_width; $posy = $h-$new_height; break; case 'left': $posx = 0; $posy = ($h-$new_height)/2; break; case 'right': $posx = $w-$new_width; $posy = ($h-$new_height)/2; break; default: $posx = ($w-$new_width)/2; $posy = ($h-$new_height)/2; break; } if (!@imagecopyresampled($new_img,$img,$posx,$posy,0,0,$new_width,$new_height,$width,$height)) { halt("无法合并图像"); exit(); } if(function_exists("imagejpeg")){ imagejpeg($new_img,$des_image); }elseif(function_exists("imagepng")){ imagepng($new_img,$des_image); }elseif(function_exists("imagegif")){ imagegif($new_img,$des_image); }else{ halt('无法创建图像'); exit(); } imagedestroy($new_img); } function images_water($resource_image,$waterimg = 'asset/water.png', $pos = 'bottomright') { $resource_image = WEB_ROOT.$resource_image; $imageInfo = getimagesize($resource_image); $img_mime = strtolower($imageInfo['mime']); switch ($img_mime){ case 'image/gif': $img = imagecreatefromgif($resource_image); break; case 'image/jpeg':$img = imagecreatefromjpeg($resource_image); break; case 'image/jpg': $img = imagecreatefromjpeg($resource_image); break; case 'image/png': $img = imagecreatefrompng($resource_image); break; } $width = imagesx($img); $height = imagesy($img); $waterimg = WEB_ROOT.$waterimg; if(file_exists($waterimg) && is_file($waterimg)) { $s_info = getimagesize($waterimg); }else{ halt($waterimg.'文件不存在.'); exit(); } $r_width = $s_info[0]; $r_height = $s_info[1]; if($r_width > $width){ halt('水印图片的宽超过原图'); exit(); } if($r_height > $height){ halt('水印图片的高超过原图'); exit(); } switch ($s_info['mime']) { case 'image/gif': $resource = imagecreatefromgif($waterimg); break; case 'image/jpeg': case 'image/jpg': $resource = imagecreatefromjpeg($waterimg); break; case 'image/png': $resource = imagecreatefrompng($waterimg); break; default: halt($s_info['mime'] .'类型不能作为水印来源.'); exit(); break; } $posx = 0; $posy = 0; switch ($pos){ case 'top': $posx = ($width-$r_width)/2; $posy = 0; break; case 'topleft': $posx = 0; $posy = 0; break; case 'topright': $posx = $width-$r_width; $posy = 0; break; case 'center': $posx = ($width-$r_width)/2; $posy = ($height-$r_height)/2; break; case 'bottom': $posx = ($width-$r_width)/2; $posy = $height-$r_height; break; case 'bottomleft': $posx = 0; $posy = $height-$r_height; break; case 'bottomright': $posx = $width-$r_width; $posy = $height-$r_height; break; case 'left': $posx = 0; $posy = ($height-$r_height)/2; break; case 'right': $posx = $width-$r_width; $posy = ($height-$r_height)/2; break; default: $posx = ($width-$r_width)/2; $posy = ($height-$r_height)/2; break; } if(!@imagecopy($img, $resource,$posx,$posy, 0,0 ,$r_width, $r_height )){ halt('无法创建水印'); exit(); } if(function_exists("imagejpeg")){ imagejpeg($img,$resource_image); }elseif(function_exists("imagepng")){ imagepng($img,$resource_image); }elseif(function_exists("imagegif")){ imagegif($img,$resource_image); }else{ halt('无法创建图像'); exit(); } imagedestroy($img); } function http_get_contents($url,$timeout = 5) { if(function_exists("curl_init")){ $https = curl_init(); curl_setopt($https, CURLOPT_URL, $url); curl_setopt($https, CURLOPT_RETURNTRANSFER, 1); curl_setopt($https, CURLOPT_CONNECTTIMEOUT, $timeout); $file_contents = curl_exec($https); curl_close($https); return $file_contents; }else{ $opts = array( 'http'=>array( 'method'=>"GET", 'timeout'=>$timeout, ) ); $context = stream_context_create($opts); return file_get_contents($url,false,$context); } } function dateformat($s,$f) { $s = str_replace('年','-',$s); $s = str_replace('月','-',$s); $s = str_replace('日','',$s); return date($f,strtotime($s)); } function truncate($string, $sublen, $start = 0, $suf='...') { $string = strip_tags($string); $pa = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf7][\x80-\xbf][\x80-\xbf][\x80-\xbf]/"; preg_match_all($pa, $string, $t_string); if(count($t_string[0]) - $start > $sublen) return join('', array_slice($t_string[0], $start, $sublen)).$suf; return join('', array_slice($t_string[0], $start, $sublen)); } function smtpsendmail($smtpemailto,$frname,$mailsubject,$mailbody) { require_once(WEB_ROOT.'/'.SYS_LIBS.'/tools/phpmailer/class.phpmailer.php'); require_once(WEB_ROOT.'/'.SYS_LIBS."/tools/phpmailer/class.smtp.php"); $config = read_cache_data('mx_mail'); $mail = new PHPMailer(); $body = $mailbody; $body = eregi_replace("[\]",'',$body); $mail->IsSMTP(); $mail->SMTPAuth = true; $mail->Host = trim($config['smtp']); $mail->Port = trim($config['port']); $mail->Username = trim($config['useremail']); $mail->Password = trim($config['password']); $mail->From = trim($config['useremail']); $mail->FromName = $frname; $mail->Subject = $mailsubject; $mail->AltBody = $body; $mail->WordWrap = 50; $mail->MsgHTML($body); $mail->AddReplyTo($smtpemailto,$mailsubject); $mail->AddAddress($smtpemailto,"First Last"); $mail->IsHTML(true); $mail->Send(); } function isedwtpl($u) { $fr = pathinfo($u); $ext = empty($fr['extension'])?'.html':'.'.$fr['extension']; $url = explode('?',$u); $spt = App::$parsemod==1?'-':'/'; $ep = explode($spt,$url[1]); $tpl = str_replace($ext,'',$ep[0]); $tpl = empty($url[0])?WEB_ROOT.'tpls/'.$tpl.$ext:WEB_ROOT.$url[0].'/tpls/'.$tpl.$ext; return file_exists($tpl); } abstract class Cache { static public $_varcache = array(); public function var_set($name ,$value) { Cache::$_varcache[$name] = $value; } public function var_get($name) { return Cache::$_varcache[$name]; } public function session_set($k,$v='',$sessionid='') { empty($sessionid)?'':session_id($sessionid); if(!session_id()) session_start(); if(is_array($k)){ foreach ($k as $key=>$val) $_SESSION[$key] = $val; }else{ $_SESSION[$k] = $v; } } public function session_get($key,$sessionid='') { empty($sessionid)?'':session_id($sessionid); if(!session_id()) session_start(); return empty($_SESSION[$key])?'':$_SESSION[$key]; } public function cookie_set($k,$v,$t = '',$a = '/',$d = '') { $d = empty($d)?'.'.$_SERVER['HTTP_HOST']:$d; $t = empty($t)?time()+3600:time()+$t; setcookie($k,$v,$t,$a,$d); } public function cookie_get($k) { return $_COOKIE[$k]; } public function cookie_del($k) { setcookie($k,"",time()-3600); } } class App { public static $parsemod = '0'; public static function urlmod($t) { App::$parsemod = $t; } public static function parseQuery($urlquery) { if($urlquery!='') { $urlquery = preg_replace('/[\/]{2,}/i','/',$urlquery); return App::parsePara($urlquery); }else{ return 'app.html'; } } private static function parsePara($urlquery) { $t = App::$parsemod; if($t==1){ $fr = pathinfo($urlquery); if(empty($fr['extension'])){ $ext = 'html'; }else{ $ext = $fr['extension']; $lextpos = strrpos($urlquery,'.'.$ext); $urlquery = $lextpos?substr($urlquery,0,$lextpos):$urlquery; } $query = explode('-',$urlquery); $lenquery = count($query); for($i=1;$i<$lenquery;$i++){ $_GET['p'.$i] = urldecode($query[$i]); $_REQUEST['p'.$i] = $_GET['p'.$i]; } $_ext = explode('?',$ext); $_ext = explode('&',$_ext[0]); return $query[0].'.'.$_ext[0]; }else{ $fr = pathinfo($urlquery); if(empty($fr['extension'])){ $ext = 'html'; }else{ $ext = $fr['extension']; $lextpos = strrpos($urlquery,'.'.$ext); $urlquery = $lextpos?substr($urlquery,0,$lextpos):$urlquery; } $query = explode('/',$urlquery); $lenquery = count($query); for($i=1;$i<$lenquery;$i=$i+2){ $_GET[$query[$i]] = urldecode($query[$i+1]); $_REQUEST[$query[$i]] = $_GET[$query[$i]]; } $_ext = explode('?',$ext); $_ext = explode('&',$_ext[0]); return $query[0].'.'.$_ext[0]; } } public static function show($tplpath = '',$s = true,$rundir = '',$querystring = '') { if(empty($rundir)){ $rundir = str_replace('\\','/',$_SERVER['SCRIPT_FILENAME']); $rundir = dirname($rundir).'/'; }else{ $firstpath = substr($rundir,0,1); if($firstpath=='/'){ $rundir = WEB_ROOT.$rundir; } } $rundir = strtolower($rundir); $d = preg_replace('/\/{2,}/','/',$rundir); $t = empty($querystring)?$_SERVER['QUERY_STRING']:$querystring; $_GET['MX_QUERY_STRING'] = $t; $tl = App::parseQuery($t); $_GET['TPL_FILE'] = $tl; $tplpath = empty($tplpath)?$d.'tpls':$d.$tplpath; $tplpath = $tplpath.'/'; $tplpath = preg_replace('/\/{2,}/','/',$tplpath); $tpl = new Template($tplpath,$tl); if($s) $tpl->display(); return $tpl; } public function submit() { $t = $_SERVER['QUERY_STRING']; if(empty($t)){ halt('No Action!'); }else{ $et = explode('/',$t); $len = count($et); $fr = pathinfo($t); $ext = empty($fr['extension'])?'html':$fr['extension']; for($i=1;$i<$len;$i=$i+2){ $valuetemp = ($len-2==$i)?str_replace('.'.$ext,'',$et[$i+1]):$et[$i+1]; $_GET[$et[$i]] = urldecode($valuetemp); $_REQUEST[$et[$i]] = $_GET[$et[$i]]; } $emds = explode('-',$et[0]); $modules = ucfirst($emds[0]).'Act'; $act = $emds[1]; $act = str_replace('.html','',$act); if(!class_exists($modules)) require_once $modules.'.class.php'; Action::$mpath = '../'; $obj = new $modules(); $obj->$act(); } } } abstract class Action { public static $classqueue = array(); public static $mpath = ''; protected function M($model = '',$dir = '') { $mdir = empty($dir)?(empty(Action::$mpath)?'':Action::$mpath):$dir.'/'; $model = $model.'Mod'; $mfile = $mdir.'mod/'.$model.'.class.php'; if(file_exists($mfile)) require_once($mfile); return new $model(); } public static function assign($tag,$val = null){ if (is_array($tag)) { foreach($tag as $key => $val){ if ($key != ""){ Template::setval($key,$val); } } }else { if ($tag!=""){ Template::setval($tag,$val); } } } } class Template { private $comp_dir = ''; private $dir_tpl = ''; private $tplfile = ''; private $cfstr = ''; static public $_tplval = array(); static public $taglibs = array(); public function Template($d='',$tpl = '') { $this->dir_tpl = $d; $this->tplfile = $tpl; $tempdir = str_replace(WEB_ROOT,'',$this->dir_tpl); $this->comp_dir = WEB_ROOT.'comp/'.$tempdir; } public function setval($name ,$value) { Template::$_tplval[$name] = $value; } public function compile() { $tplfile = $this->dir_tpl.'/'.$this->tplfile; $tplfile = preg_replace('/\/{2,}/','/',$tplfile); $compfile = $this->comp_dir.'/'.$this->tplfile.'.php'; $this->comp_dir = dirname($compfile); $compfile = preg_replace('/\/{2,}/','/',$compfile); if(!file_exists($tplfile)) DISPLAY_ERRORS?halt('No Template:'.$tplfile):redirect(WEB_APP); if(!file_exists($compfile) || (file_exists($tplfile) && filemtime($compfile)<filemtime($tplfile))){ if(!is_dir($this->comp_dir)) mk_dir($this->comp_dir); $this->cfstr = file_get_contents($tplfile); $this->cfstr = $this->tagscomp($this->cfstr); $this->cfstr = "<?php if(!defined('WEB_ROOT')) exit();?>".$this->cfstr; file_put_contents($compfile,$this->cfstr); } return $compfile; } public function tagscomp($str) { $str = str_replace("{WEB_APP}","<?php echo WEB_APP; ?>",$str); $str = str_replace("{NOP:WEB_APP}","{WEB_APP}",$str); $str = str_replace("{DB_MX_PRE}","<?php echo DB_MX_PRE; ?>",$str); $str = str_replace("{NOP:DB_MX_PRE}","{DB_MX_PRE}",$str); $str = str_replace("{DOMAIN}","<?php echo DOMAIN; ?>",$str); $str = str_replace("{NOP:DOMAIN}","{DOMAIN}",$str); $tagstemp = Template::$taglibs; $len = count($tagstemp); for($i=0;$i<$len;$i++){ $class = $tagstemp[$i]; $tempclass = new $class($str); $str = $tempclass->compile(); } $str = preg_replace_callback('/\{TAGDEF:([\s\S]*)\}/imU',array(&$this,'regdetag'),$str); $str = preg_replace_callback('/<%([\s\S]*)%>/imU',array(&$this,'regother'),$str); return $str; } public static function nocomp($regtext,$s,$e) { $nostr = substr($regtext,0,4); if($nostr=='NOP:'){ return $s.substr($regtext,4).$e; }else{ return true; } } private function regdetag($reg) { $is = Template::nocomp($reg[1],'{TAGDEF:','}'); if($is===true){ $data = read_cache_data('tagdata'); foreach($data as $v){ if($v['tagname']==$reg[1]){ return $v['tagcontent']; } } } return $is; } private function regother($reg) { $is = Template::nocomp($reg[1],'<%','%>'); if($is===true){ $str = str_replace("\$VAL","Template::\$_tplval",$reg[1]); return '<?php '.$str.' ?>'; } return $is; } public function fetch() { $cpfile = $this->compile(); ob_start(); include($cpfile); $data = ob_get_contents(); ob_end_clean(); return $data; } public function display() { $str = $this->fetch(); echo $str; } } class DBConnetor { public $link = ''; public $db_name = ''; private static $instance; private function DBConnetor() { $configs = include(WEB_ROOT.'config.php'); $db_link = mysql_connect($configs['DB_HOST'],$configs['DB_USER'],$configs['DB_PW']); $db_flag = mysql_select_db($configs['DB_NAME'],$db_link); if(mysql_get_server_info($db_link)>'4.0.1') mysql_query("SET NAMES utf8", $db_link); if(mysql_get_server_info($db_link)>'5.0.1') mysql_query("SET sql_mode=''", $db_link); $this->link = $db_link; $this->db_name = $configs['DB_NAME']; } public static function getconnetor() { if(!self::$instance instanceof self){ self::$instance =new DBConnetor(); } return self::$instance; } } class Model { protected static $db_link = false; protected static $dbname = ''; private $sql; public function Model() { $m = DBConnetor::getconnetor(); Model::$db_link = $m->link; Model::$dbname = $m->db_name; } public function set_sql($sql) { $this->sql = $sql; } public function get_sql() { return $this->sql; } public function insert($table, $field = '', $data = '') { if(''==$field && '' == $data){ $this->sql = $table; }else { if('' == $data){ $sValues = $this->get_field_value($field); $itemValues = '('.join(',',$sValues).')'; }else { $tempValue = array(); for ($i=0; $i<count($data); $i++) array_push($tempValue,'('.join(',', $data[$i]).')'); $itemValues = join(',',$tempValue); } $this->sql = 'INSERT INTO '.$table.' ('.join(',',$field).') VALUES '.$itemValues.''; } $this->query(); } public function update($table, $field = '', $where ='') { if(''==$field && '' == $where){ $this->sql = $table; }else { $aValues = $this->get_field_value($field); $items = array(); foreach($field as $k=>$v) array_push($items, $v.'='.$aValues[$k]); $this->sql = 'UPDATE '.$table.' SET '.implode(',',$items).' WHERE '.$where; } $this->query(); } public function get_fields($tn,$nofd = array(),$dbname = '') { $dbname = empty($dbname)?Model::$dbname:$dbname; $fields = mysql_list_fields($dbname, $tn, Model::$db_link); $columns = mysql_num_fields($fields); $temp = array(); for ($i=0;$i<$columns; $i++) { $fns = mysql_field_name($fields,$i); if($fns != 'id' && !in_array($fns,$nofd)) array_push($temp,$fns); } return $temp; } public function delete($table,$where='') { if(empty($where)) $this->sql = $table; else $this->sql = 'DELETE FROM '.$table.' WHERE '.$where.''; $this->query(); } public function query($sql = '',$buf = false) { if(empty($sql)) $sql = $this->sql; if($buf){ return mysql_query($sql,Model::$db_link); }else{ return mysql_unbuffered_query($sql,Model::$db_link); } } public function get_insert_id() { return mysql_insert_id(Model::$db_link); } public function get_row($sql = '') { if(empty($sql)) $sql = $this->sql; $query = $this->query($sql,true); if(!$query) return array(); $result = mysql_fetch_assoc($query); mysql_free_result($query); return $result; } public function get_all($sql = '') { if(empty($sql)) $sql = $this->sql; $query = $this->query($sql,true); if(!$query) return array(); $result = array(); while(false !== $row = mysql_fetch_assoc($query)) array_push($result,$row); mysql_free_result($query); return $result; } public function get_tables() { $rs = $this->query('SHOW TABLES FROM '.Model::$dbname); $tables = array(); while(false!== $row = mysql_fetch_row($rs)){ array_push($tables,$row[0]); } mysql_free_result($rs); return $tables; } public function page_mod($stride = '',$ptag = 'page') { $stride = empty($stride)?10:$stride; $currentpage = (isset($_GET[$ptag]) && $_GET[$ptag]!='')?intval($_GET[$ptag]):1; $currentpage = $currentpage<1?1:$currentpage; $sql = $this->get_sql(); $start = empty($_POST['start'])?($currentpage-1)*$stride:$_POST['start']; $nsql = $sql.' LIMIT '.$start.','.$stride.''; $this->set_sql($nsql); $pagetotal = $this->get_num($sql); $page_total = ceil($pagetotal/$stride); if($page_total<1) $page_total = 1; $next = $currentpage + 1; if($next > $page_total) $next = $page_total; $up = $currentpage - 1; if($up<1) $up = 1; return array( 'tag' => $ptag, 'stride' => $stride, 'current_page' => $currentpage, 'last_page' => $page_total, 'next_page' => $next, 'up_page' => $up, 'total' => $pagetotal ); } public function sql_search($d) { $sql = ''; if(is_array($d)){ foreach ($d as $k=>$v){ if(!empty($_REQUEST[$k])){ if(!isset($v['lk'])) $v['lk'] = 'AND'; if(!isset($v['eq'])) $v['eq'] = '='; $sql .= ($v['eq'] == 'LIKE')? ' '.$v['lk'].' '.$v['fd'].' '.$v['eq'].' "%'.urldecode($_REQUEST[$k]).'%"' :' '.$v['lk'].' '.$v['fd'].' '.$v['eq'].' "'.urldecode($_REQUEST[$k]).'"'; } } } return $sql; } public function get_num($sql = '') { if(empty($sql)) $sql = $this->sql; $query = $this->query($sql,true); return mysql_num_rows($query); } private function get_field_value($a) { $returns = array(); foreach($a as $list){ $_POST[$list] = safe_html($_POST[$list]); array_push($returns,'"'.mysql_real_escape_string($_POST[$list], Model::$db_link).'"'); } return $returns; } private function halt($m) { if(DISPLAY_ERRORS) echo $m; } } class OptLogs extends Model { private $curtbname = ''; public function OptLogs() { $this->Model(); $this->curtbname = DB_MX_PRE.'optlog_'.date('ym'); $this->createlogs(); } private function createlogs() { $tabls = $this->get_tables(); if(!in_array($this->curtbname, $tabls)){ $sql = '
				CREATE TABLE `'.$this->curtbname.'` (
					`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
					`uid` INT NOT NULL ,
					`name` VARCHAR( 100 ) NOT NULL ,
					`mid` INT NOT NULL ,
					`mname` VARCHAR( 255 ) NOT NULL ,
					`optype` VARCHAR( 20 ) NOT NULL ,
					`optlogs` LONGTEXT NOT NULL ,
					`data` LONGTEXT NOT NULL ,
					`optdate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP 
				) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=3 ;
			'; $this->query($sql); } } public function node($t,$users,$optlogs,$data,$minfo) { $_POST['uid'] = $users['id']; $_POST['name'] = $users['name']; $_POST['mid'] = $minfo['id']; $_POST['mname'] = $minfo['name']; $_POST['optype'] = $t; $_POST['optlogs'] = serialize($optlogs); $_POST['data'] = serialize($data); $this->insert($this->curtbname,array('uid','name','mid','mname','optype','optlogs','data')); } } import('Verify'); class PlugsUserPassAct extends Action { private $mm = ''; public function PlugsUserPassAct() { $this->mm = new Model(); } private function readpwinfo($u,$p) { return $this->mm->get_row('SELECT * FROM '.DB_MX_PRE.'user WHERE username="'.$u.'" AND password="'.md5($p).'"'); } private function getsynpw($rid) { return $this->mm->get_row('SELECT syninfo FROM '.DB_MX_PRE.'mgroup WHERE id="'.$rid.'"'); } private function loglogin($user) { $_POST['uid'] = $user['id']; $_POST['name'] = $user['name']; $_POST['logintime'] = date('Y-m-d H:i:s'); $_POST['ip'] = get_client_ip(); $_POST['address'] = get_ip_address($_POST['ip']); $items = $this->mm->get_fields(DB_MX_PRE.'loginlogs'); $this->mm->insert(DB_MX_PRE.'loginlogs',$items); return $this->mm->get_insert_id(); } private function loglogout($logid) { $_POST['logoutime'] = date('Y-m-d H:i:s'); $this->mm->update(DB_MX_PRE.'loginlogs',array('logoutime'),'id="'.$logid.'"'); } public function login() { $pr = $this->readpwinfo($_POST['username'],$_POST['password']); if(empty($pr)){ echo '{type:"error",msg:"<strong>错误</strong>：用户名或者密码不正确!"}'; exit(); }else{ $loginid = $this->loglogin($pr); $synpwid = $this->getsynpw($pr['gid']); $esynpw = explode(',',$synpwid['syninfo']); $synpwg = count($esynpw); $epwarr = array(); for($i=0;$i<$synpwg;$i++){ if(!empty($esynpw[$i])){ $kds = explode(':',$esynpw[$i]); $epwarr[$kds[0]] = $kds[1]; } } $ip = get_client_ip(); if($pr['pwgrade']==1 && $ip!='127.0.0.1'){ $isuser = $this->ispasscard(); }else{ $isuser = true; } Cache::session_set(array("IMUSER_UID"=>$pr['id'],"MXUSER_INFO"=>$pr,"MX_SYNARRAY"=>$epwarr,"IMUSER_LOGID"=>$loginid,"IMUSER_DEVELOP"=>$isuser)); echo '{type:"url",url:"'.($isuser?'./?main.html':'./?getpwcard.html').'"}'; exit(); } } private function ispasscard() { $licefile = WEB_ROOT.'/license.mx'; if(!file_exists($licefile)) return false; $str = file_get_contents($licefile); $time = substr($str,12,22); if(time()-$time>86400*365){ return false; }else{ $racode = substr($str,-4); $spm = substr($str,0,12); $epm = substr($str,22,20); $lsmd5 = $spm.$epm; $md5dm = md5(DOMAIN.$racode); return $lsmd5==$md5dm?true:false; } } public static function islogin($path) { $users = Cache::session_get("MXUSER_INFO"); if(empty($users)){ redirect($path."?app.html",2,"请登录后再操作!"); }else{ $ispw = Cache::session_get("IMUSER_DEVELOP"); if(!$ispw) redirect($path."?getpwcard.html",2,"口令文件错误!"); } } public static function admindexpp() { $users = Cache::session_get("MXUSER_INFO"); switch ($_GET['TPL_FILE']){ case "app.html": if(!empty($users)) redirect("./?main.html"); break; case "getpwcard.html": break; default: PlugsUserPassAct::islogin('./'); } } public function logout() { session_start(); $this->loglogout($_SESSION['IMUSER_LOGID']); unset($_SESSION['IMUSER_UID'],$_SESSION['MXUSER_INFO'],$_SESSION['IMUSER_LOGID'],$_SESSION['IMUSER_DEVELOP']); session_destroy(); redirect("../"); } } class ClassLoad { private $tplstr = ''; public function ClassLoad($t) { $this->tplstr = $t; } public function compile() { $this->tplstr = preg_replace_callback('/<%import(.+)%>/im',array(&$this,'regimport'),$this->tplstr); return $this->tplstr; } private function regimport($reg) { preg_match_all("/(\\w+)=\"(.*)\"/isU",$reg[1],$atrs); $keys = $atrs[1]; $vals = $atrs[2]; $arr = array(); for($i=0;$i<count($keys);$i++) $arr[$keys[$i]] = $vals[$i]; if($arr['class']){ $path = empty($arr['path'])?'':$arr['path']; $res = '<?php if(empty(Action::$classqueue["'.$arr['class'].'"])){ require_once(file_exists("'.$path.'do/'.$arr['class'].'Act.class.php")?"'.$path.'do/'.$arr['class'].'Act.class.php":"'.$path.'~do/'.$arr['class'].'Act.class.php"); Action::$classqueue["'.$arr['class'].'"] = new '.$arr['class'].'Act(); }'; if($arr['method']){ $emethods = explode(',',$arr['method']); for($i=0;$i<count($emethods);$i++){ $res .= 'Action::$classqueue["'.$arr['class'].'"]->'.$emethods[$i].'();'; } } $res .= '?>'; } return $res; } } class MFInclude { private $tplstr = ''; public function MFInclude($t) { $this->tplstr = $t; } public function compile() { $this->tplstr = preg_replace_callback('/<%include\s(\S+)%>/im',array(&$this,'reginclude'),$this->tplstr); return $this->tplstr; } private function reginclude($reg) { $para = explode('?',$reg[1]); $paralen = count($para); for($i=0;$i<$paralen;$i++){ $para[$i] = preg_replace_callback('/\\$(\w+)/im',array(&$this,'regvals'),$para[$i]); } $result = ($paralen>1)? "<?php MFInclude::regincludepage('$para[0]','$para[1]'); ?>": "<?php include(\"".$reg[1]."\"); ?>"; return $result; } private function regvals($reg) { return "'.\$_GET['".$reg[1]."'].'"; } public static function regincludepage($d,$q) { $___get = $_GET; $___CLASSQUEUE = Action::$classqueue; unset($_GET); Action::$classqueue = array(); foreach($___get as $key=>$value) $_GET['PARENT_'.$key] = $value; $d = $d == './'?'':$d; App::show('',true,$d,$q); $_GET=$___get; Action::$classqueue = $___CLASSQUEUE; } } class TagAttrLoop { private $tplstr = ''; public function TagAttrLoop($t) { $this->tplstr = $t; } public function compile() { $this->tplstr = preg_replace_callback('/<%loop(.+)%>/im',array(&$this,'regloop'),$this->tplstr); $this->tplstr = preg_replace('/<%\/loop%>/im',"<?php }} unset(\$_from);?>",$this->tplstr); $this->tplstr = preg_replace('/<%NOP:\/loop%>/im',"<%/loop%>",$this->tplstr); $this->tplstr = preg_replace_callback('/<%row(.+)%>/im',array(&$this,'regrow'),$this->tplstr); return $this->tplstr; } private function regloop($reg) { $is = Template::nocomp($reg[1],'<%loop','%>'); if($is===true){ preg_match_all("/(\\w+)=\"(.*)\"/isU",$reg[1],$atrs); $keys = $atrs[1]; $vals = $atrs[2]; $arr = array(); for($i=0;$i<count($keys);$i++) $arr[$keys[$i]] = $this->atreplace($vals[$i]); $taglist = empty($arr['item'])?'list':$arr['item']; if($arr['class'] && $arr['method']){ $path = $arr['path']; if(!empty($path)){ $path = substr($path,-1)=='/'?$path:$path.'/'; } $res = "<?php if(!isset(Action::\$classqueue['".$arr['class']."'])){ require_once(file_exists(\"".$path."do/".$arr['class']."Act.class.php\")?\"".$path."do/".$arr['class']."Act.class.php\":\"".$path."~do/".$arr['class']."Act.class.php\"); Action::\$mpath='".$path."'; Action::\$classqueue['".$arr['class']."'] = new ".$arr['class']."Act(); } \$_from = Action::\$classqueue['".$arr['class']."']->".$arr['method']."(); if (!is_array(\$_from) && !is_object(\$_from)){ settype(\$_from, 'array'); }if (count(\$_from)){"; $res .= "foreach(\$_from as \$key=>Template::\$_tplval['".$taglist."']){ ?>"; } if($arr['from'] && $arr['item']){ $res = "<?php \$_from = Template::\$_tplval['".$arr['from']."']; if (!is_array(\$_from) && !is_object(\$_from)){ settype(\$_from, 'array'); }if (count(\$_from)){"; $res .= "foreach(\$_from as \$key=>Template::\$_tplval['".$taglist."']){ ?>"; } if($arr['tn'] && ($arr['row'] || $arr['lim'])){ $res = "<?php \$_from = TagAttrLoop::emslist('".$arr['tn']."','".$arr['order']."','".$arr['where']."','".$arr['row']."','".$arr['type']."','".$arr['deftype']."','".$arr['lim']."','".$arr['pad']."','".$arr['debug']."'); if (!is_array(\$_from) && !is_object(\$_from)){ settype(\$_from, 'array'); }if (count(\$_from)){"; $res .= "foreach(\$_from as \$key=>Template::\$_tplval['".$taglist."']){ ?>"; } if($arr['tn'] && $arr['row'] && $arr['page']){ $res = "<?php \$_plist = TagAttrLoop::emspagelist('".$arr['tn']."','".$arr['order']."','".$arr['row']."','".$arr['where']."','".$arr['page']."','".$arr['type']."','".$arr['deftype']."','".$arr['debug']."'); \$_from = \$_plist['all']; Template::\$_tplval['page'] = \$_plist['page']; Template::\$_tplval['pagejson'] = json_encode(\$_plist['page']); if (!is_array(\$_from) && !is_object(\$_from)){ settype(\$_from, 'array'); }if (count(\$_from)){"; $res .= "foreach(\$_from as \$key=>Template::\$_tplval['".$taglist."']){ ?>"; } return $res; } return $is; } private function atreplace($str) { $str = preg_replace('/\\$([\w]+)\\.([\w]+)/im',"~.Template::###_tplval[\"$1\"][\"$2\"].~",$str); $str = preg_replace('/LIKE \\$([\w]+)/im',"LIKE \"%~.urldecode(###_GET[\"$1\"]).~%\"",$str); $str = preg_replace('/\\$([\w]+)/im',"~.urldecode(###_GET[\"$1\"]).~",$str); $str = str_replace('###','$',$str); $str = str_replace("'","\\'",$str); $str = str_replace("~","'",$str); return $str; } private function regrow($reg) { $is = Template::nocomp($reg[1],'<%row','%>'); if($is===true){ preg_match_all("/(\\w+)=\"(.*)\"/isU",$reg[1],$atrs); $keys = $atrs[1]; $vals = $atrs[2]; $arr = array(); for($i=0;$i<count($keys);$i++) $arr[$keys[$i]] = $this->atreplace($vals[$i]); $v = $arr['value']; $v = (preg_match('/Template::\\$_tplval/im',$arr['value']))?$v:"'".$v."'"; $taginfo = empty($arr['item'])?'info':$arr['item']; return "<?php Template::\$_tplval['".$taginfo."'] = TagAttrLoop::emsdeital('".$arr['tn']."','".$arr['fd']."',".$v.",'".$arr['key']."','".$arr['where']."','".$arr['defsort']."','".$arr['type']."','".$arr['deftype']."','".$arr['cntfd']."','".$arr['debug']."'); ?>"; } return $is; } public static function emslist($dbname,$order = 'id DESC',$where = '',$len = 10,$type = '',$deftype='',$lim = '',$pad = '',$debug='') { $obj = new Model(); $limit = $len==0?'':' LIMIT 0,'.$len.''; $limit = empty($limit)?' LIMIT '.$lim.'':$limit; $order = empty($order)?'id DESC':$order; $type = str_replace(array('"',"'"),array("",""),$type); $type = empty($type)?$deftype:$type; if(empty($where)){ $where = empty($type)?'':' AND __typeid="'.$type.'"'; }else{ $where = empty($type)?' AND '.$where.'':' AND __typeid="'.$type.'"'.$where.''; } $sql_sql = 'SELECT * FROM '.$dbname.' WHERE __syspub=1'.$where.' ORDER BY __systop DESC,'.$order.$limit.''; $d = $obj->get_all($sql_sql); if(empty($d)){ $sql_sql = 'SELECT * FROM '.$dbname.' WHERE 1'.$where.' ORDER BY '.$order.$limit.''; $d = $obj->get_all($sql_sql); } if($debug == 1) echo $sql_sql; if(empty($pad)){ return $d; }else{ $em = explode(',',$lim); $pm = $em[1]; $data = array(); for($i=0;$i<$pm;$i++){ $data[$i] = $d[$i]; } return $data; } } public static function emspagelist($dbname,$order = 'id DESC',$stride=10,$where = '',$ptag='page',$type = '',$deftype='',$debug='') { $obj = new Model(); $order = empty($order)?'id DESC':$order; $type = str_replace(array('"',"'"),array("",""),$type); $type = empty($type)?$deftype:$type; if(empty($where)){ $where = empty($type)?'':' AND __typeid="'.$type.'"'; }else{ $where = empty($type)?' AND '.$where.'':' AND __typeid="'.$type.'"'.$where.''; } $sql_str = 'SELECT * FROM '.$dbname.' WHERE __syspub=1'.$where.' ORDER BY __systop DESC,'.$order.''; $obj->set_sql($sql_str); $res['page'] = $obj->page_mod($stride,$ptag); $res['all'] = $obj->get_all(); if(empty($res['all'])){ $sql_str = 'SELECT * FROM '.$dbname.' WHERE 1'.$where.' ORDER BY '.$order.''; $obj->set_sql($sql_str); $res['page'] = $obj->page_mod($stride,$ptag); $res['all'] = $obj->get_all(); } if($debug == 1) echo $sql_str; return $res; } public static function emsdeital($dbname,$field='id',$value = '',$key= '',$where='',$defsort = '',$type = '',$deftype='',$cntfd = '',$debug='') { $obj = new Model(); $value = empty($key)?$value:$_GET[$key]; if($value!='' && !empty($field) && empty($where)){ if(!empty($defsort)){ Template::$_tplval['uppageinfo'] = $obj->get_row('SELECT * FROM '.$dbname.' WHERE '.$field.'>\''.$value.'\' ORDER BY '.$field.' '.$defsort.' LIMIT 0,1'); Template::$_tplval['downpageinfo'] = $obj->get_row('SELECT * FROM '.$dbname.' WHERE '.$field.'<\''.$value.'\' ORDER BY '.$field.' '.($defsort=='DESC'?'ASC':'DESC').' LIMIT 0,1'); } if(!empty($cntfd)){ $obj->update('UPDATE '.$dbname.' SET '.$cntfd.'='.$cntfd.'+1 WHERE '.$field.'=\''.$value.'\''); } $res_sql = 'SELECT * FROM '.$dbname.' WHERE '.$field.'=\''.$value.'\''; } if(!empty($type)){ $type = str_replace(array('"',"'"),array("",""),$type); $type = empty($type)?$deftype:$type; $where = ' WHERE __typeid="'.$type.'"'; if(!empty($cntfd)){ $obj->update('UPDATE '.$dbname.' SET '.$cntfd.'='.$cntfd.'+1'.$where.''); } $res_sql = 'SELECT * FROM '.$dbname.$where.''; } if(!empty($where) && empty($type)){ $where = ' WHERE '.$where.''; if(!empty($cntfd)){ $obj->update('UPDATE '.$dbname.' SET '.$cntfd.'='.$cntfd.'+1'.$where.''); } $res_sql = 'SELECT * FROM '.$dbname.$where.''; } if($debug == 1) echo $res_sql; $res = $obj->get_row($res_sql); return empty($res)?array():$res; } } class Variable { private $tplstr = ''; public function Variable($t) { $this->tplstr = $t; } public function compile() { $this->tplstr = preg_replace_callback('/<%\\$([\w\.\|:\\$\s\+\'\"]+)%>/im',array(&$this,'reg_vars'),$this->tplstr); return $this->tplstr; } private function reg_vars($reg) { $is = Template::nocomp($reg[1],'<%','%>'); if($is===true){ $sreturn = ""; $avar_temp = explode("|",$reg[1]); $avar = explode(".",$avar_temp[0]); $arrkeys = array(); for($i=0;$i<count($avar);$i++) array_push($arrkeys,"['$avar[$i]']"); $assval = "Template::\$_tplval".join("",$arrkeys).""; $sreturn = "<?php echo ".$assval."; ?>"; if(isset($avar_temp[1])){ $fun = explode(':',$avar_temp[1]); $other_pa = join(',',array_slice($fun,1)); if(function_exists($fun[0])){ $sreturn = $other_pa==''? "<?php echo call_user_func('$fun[0]',".$assval."); ?>": "<?php echo call_user_func('$fun[0]',".$assval.",".$other_pa."); ?>"; }else{ $emet = explode(".",$fun[0]); $sreturn = $other_pa==''? "<?php echo call_user_func(array(&\$_O$emet[0],'$emet[1]'),".$assval."); ?>": "<?php echo call_user_func(array(&\$_O$emet[0],'$emet[1]'),".$assval.",".$other_pa."); ?>"; } } return $sreturn; } return $is; } } Template::$taglibs=array ( 0 => 'ClassLoad', 1 => 'MFInclude', 2 => 'TagAttrLoop', 3 => 'Variable', ); ?>